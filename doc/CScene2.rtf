{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1031\deflangfe1031{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f36\froman\fcharset238\fprq2 Times New Roman CE;}{\f37\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f39\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f40\froman\fcharset162\fprq2 Times New Roman Tur;}{\f41\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f42\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f43\froman\fcharset186\fprq2 Times New Roman Baltic;}
{\f44\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f46\fswiss\fcharset238\fprq2 Arial CE;}{\f47\fswiss\fcharset204\fprq2 Arial Cyr;}{\f49\fswiss\fcharset161\fprq2 Arial Greek;}{\f50\fswiss\fcharset162\fprq2 Arial Tur;}
{\f51\fswiss\fcharset177\fprq2 Arial (Hebrew);}{\f52\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f53\fswiss\fcharset186\fprq2 Arial Baltic;}{\f54\fswiss\fcharset163\fprq2 Arial (Vietnamese);}{\f56\fmodern\fcharset238\fprq1 Courier New CE;}
{\f57\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f59\fmodern\fcharset161\fprq1 Courier New Greek;}{\f60\fmodern\fcharset162\fprq1 Courier New Tur;}{\f61\fmodern\fcharset177\fprq1 Courier New (Hebrew);}
{\f62\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f63\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f64\fmodern\fcharset163\fprq1 Courier New (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;
\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;
\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1031\langfe1031\cgrid\langnp1031\langfenp1031 \snext0 Normal;}{\*\cs10 \additive \ssemihidden 
Default Paragraph Font;}{\*\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}}{\*\listtable{\list\listtemplateid-289878440\listhybrid{\listlevel\levelnfc0\levelnfcn0
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67567631\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67567641\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67567643\'02\'02.;}{\levelnumbers\'01;}\fi-180\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67567631
\'02\'03.;}{\levelnumbers\'01;}\fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67567641\'02\'04.;}{\levelnumbers\'01;}
\fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67567643\'02\'05.;}{\levelnumbers\'01;}\fi-180\li4320\jclisttab\tx4320\lin4320 }
{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67567631\'02\'06.;}{\levelnumbers\'01;}\fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc4\levelnfcn4\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67567641\'02\'07.;}{\levelnumbers\'01;}\fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67567643\'02\'08.;}{\levelnumbers\'01;}\fi-180\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid236981021}{\list\listtemplateid-160915468\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67567631\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\jclisttab\tx720\lin720 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67567641\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\jclisttab\tx1440\lin1440 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67567643\'02\'02.;}{\levelnumbers\'01;}\fi-180\li2160\jclisttab\tx2160\lin2160 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67567631
\'02\'03.;}{\levelnumbers\'01;}\fi-360\li2880\jclisttab\tx2880\lin2880 }{\listlevel\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67567641\'02\'04.;}{\levelnumbers\'01;}
\fi-360\li3600\jclisttab\tx3600\lin3600 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67567643\'02\'05.;}{\levelnumbers\'01;}\fi-180\li4320\jclisttab\tx4320\lin4320 }
{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67567631\'02\'06.;}{\levelnumbers\'01;}\fi-360\li5040\jclisttab\tx5040\lin5040 }{\listlevel\levelnfc4\levelnfcn4\leveljc0
\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67567641\'02\'07.;}{\levelnumbers\'01;}\fi-360\li5760\jclisttab\tx5760\lin5760 }{\listlevel\levelnfc2\levelnfcn2\leveljc2\leveljcn2\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67567643\'02\'08.;}{\levelnumbers\'01;}\fi-180\li6480\jclisttab\tx6480\lin6480 }{\listname ;}\listid1530793987}}{\*\listoverridetable{\listoverride\listid236981021\listoverridecount0\ls1}
{\listoverride\listid1530793987\listoverridecount0\ls2}}{\*\rsidtbl \rsid2110310\rsid2577356\rsid2754001\rsid3081021\rsid4482357\rsid5844254\rsid6827466\rsid7867135\rsid7869246\rsid9111808\rsid9398274\rsid9582220\rsid10053162\rsid11040321\rsid12994296
\rsid13314269\rsid13837304\rsid14224660\rsid15532836\rsid15805396}{\*\generator Microsoft Word 10.0.2627;}{\info{\author ASM}{\operator ASM}{\creatim\yr2004\mo3\dy13\hr18\min50}{\revtim\yr2004\mo3\dy14\hr18\min22}{\version21}{\edmins0}{\nofpages7}
{\nofwords2866}{\nofchars18058}{\*\company Private}{\nofcharsws20883}{\vern16437}}\margl1417\margr1417\margt1417\margb1134 \widowctrl\ftnbj\aenddoc\hyphhotz425\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dghspace120
\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind5\viewscale100\nolnhtadjtbl\rsidroot13837304 \fet0\sectd \linex0\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1031\langfe1031\cgrid\langnp1031\langfenp1031 {\b\f1\fs22\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 CScene2 Class Documentation
\par Part of the MafiaLib Engine
\par Copyright (c) 2003, 2004 ASM}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par This document contains all necessary information you need to know to work with the CScene2 Class of the MafiaLib Engine.
\par If you own the CMLWrapper wrapper class, you can ignore the HANDLE hFile parameters in function declarations.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 Overview}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par 
\par MafiaLib Engine is a set of functions which allow you to work with Mafia's datafiles.
\par The CScene2 class is a part of this library. This class provides functions for working with Mafia's scene2.bin file which is the most important file since it contains the mission, the level and lightning.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 ObjectInfo_t structure}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par 
\par The ObjectInfo_t structure is generally used for setting and retrieving object information such as its rotation, position, etc....
\par The member variables are explained in the Scene2.h file.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 Filter_t structure}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par 
\par The Filter_t structure is used by the GetNextObject function.
\par The member variables are explained in the Scene2.h file.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 void CScene2::AddObject(HANDLE hFile, ObjectInfo_t * Scene2ObjectInfo_t, char *szScriptFileName, char * szObjectToReplace)}{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par 
\par Adds an object to scene2.bin file
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 ObjectInfo_t Scene2ObjectInfo_t}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Pointer to a ObjectInfo_t structure containing the objects properties

\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char * szScriptFileName}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
: Pointer to a zero terminated buffer containing the name of the file containing the script which is to be added along with the object (useful if an object is readded with different properties)
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char * szObjectToReplace}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Pointer to a zero terminated buffer 
containing the name of the object which is supposed to be
\par replaced by the function.
\par 
\par Remarks:
\par If }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 szObjectToReplace}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304  is set to NULL, the function will add the object specified by }{
\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 Scene2ObjectInfo_t}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 .
\par If you specify an object name in }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 szObjectToReplace}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 , the fun
ction will replace the given object by the object specified by }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 Scene2ObjectInfo_t}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
. If the object does not exist, the function fails.
\par 
\par Ensure that you set the }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 lType}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
 member of the ObjectInfo_t structure properly. Otherwise the function will fail.
\par Currently supported object types:
\par S_NORMAL_OBJECT_TYPE_MODEL
\par S_NORMAL_OBJECT_TYPE_LIGHT
\par S_NORMAL_OBJECT_TYPE_06
\par NORMAL_OBJECT_TYPE_SECTOR
\par SPECIAL_OBJECT_TYPE_CHARACTER
\par SPECIAL_OBJECT_TYPE_PLAYER\line SPECIAL_OBJECT_TYPE_SHOOTABLE
\par SPECIAL_OBJECT_TYPE_CAR }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 (*) }{\b\f2\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 <tmp>}{
\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 SPECIAL_OBJECT_TYPE_SCRIPT }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 (*) }{
\b\f2\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 <st>}{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 SPECIAL_OBJECT_TYPE_TRAFFIC
\par SPECIAL_OBJECT_TYPE_PEDS}{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 ADDITIONAL_OBJECT_TYPE_SCRIPT }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 (*) <init-tmp>
\par 
\par (*): }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 Objects with this signature are hard coded objects. This means that they have a hardcoded name. After the object was added y
ou must change the name of it. The hardcoded name of the object is written after the signature (strings in "<>" brackets)
\par 
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 Please note: AddObject is NOT continued anymore! Use AddObjectEx instead! AddObject is will NOT be available in future releases anymore!}{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 long CScene2::AddObjectScript(HANDLE hFile, char * szObjectName, char * szFileName, short nDatablockType)}{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par 
\par Adds a script to an existing object
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char * szObjectName}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Name of the object
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char * szFileName}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Name of the file containing the script
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 short nDatablockType }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
: Defines the datablock the object is situated in. It can be one of the following constants:
\par SPECIAL_MAIN
\par ADDITIONAL_MAIN
\par 
\par Remarks:
\par In theory, any object in SPECIAL_MAIN can have a script but it is only executed if the object is one of the following types:
\par SPECIAL_OBJECT_TYPE_SCRIPT
\par SPECIAL_OBJECT_TYPE_CHARACTER
\par If an object has another type, the game will work but the script is ignored.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 void CScene2::CloseScene2Bin(HANDLE hFile)}{\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par Closes an open scene2.bin file
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 int CScene2::DeleteObject(HANDLE hFile, char * szObjectName, short nDatablockType)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par Deletes an existing object
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char * szObjectName}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Name of the object to delete
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 short nDatablock}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : The datablock the object is situated in. It can be any of the following constants

\par NORMAL_MAIN
\par SPECIAL_MAIN
\par ADDITIONAL_MAIN
\par DATABLOCK_NOMATTER (0)
\par 
\par Remarks:
\par It's important to define the datablock since an object can exist more than once in the file. If you specify DATABLOCK_NOMATTER, the function will look for the first occurence of the object and delete it.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 long CScene2::EditObjectName(HANDLE hFile, char * szOldObjectName, char * szObjectName, short nDatablockType)}{
\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par Edits the name of a given object
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char * szOldObjectName}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : The original name of the object (used to find it)
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char * szObjectName}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : The new name of the object
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 short nDatablock}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : The datablock the object is situated in. It can be any of the following constants

\par NORMAL_MAIN
\par SPECIAL_MAIN
\par ADDITIONAL_MAIN
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 long CScene2::ExportObject(HANDLE hFile, char * szFileName, char * szObjectName, short nDatablockType)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par Exports a given object
\par 
\par HANDLE hFile: Handle to an open scene2.bin file. The handle must have read/write access.
\par char * szFileName: Name of the file to store the object in
\par char * szObjectName: Name of the object to export
\par short nDatablock: The datablock the object is situated in. It can be any of the following constants
\par NORMAL_MAIN
\par SPECIAL_MAIN
\par ADDITIONAL_MAIN
\par DATABLOCK_NOMATTER (0)
\par 
\par Remarks:
\par If you specify DATABLOCK_NOMATTER, the function will look for the first occurence of the object and export it
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 long CScene2::ExtractObjectScript(HANDLE hFile, char * szObjectName, short nDatablockType, char * szFileName)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par Extracts the script of an object
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char * szObjectName}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Name of the object with the requested scripts
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 short nDatablock}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : The datablock the object is situated in. It can be any of the following constants

\par SPECIAL_MAIN
\par ADDITIONAL_MAIN
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char * szFileName}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Name of the file to store the script in
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 long CScene2::FindObject(HANDLE hFile, char * szObjectName, short nDatablockType)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par Looks for object szObjectName in datablock nDatablockType
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char * szObjectName}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Name of the object to look for
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 short nDatablock}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : The datablock the object is situated in. It can be any of the following constants

\par NORMAL_MAIN
\par SPECIAL_MAIN
\par ADDITIONAL_MAIN
\par DATABLOCK_NOMATTER (0)
\par 
\par Remarks:
\par If the object is found, the return value is the offset of the object in the file. If the object is not found, the return value is -1.
\par If you specify DATABLOCK_NOMATTER in }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 nDatablockType}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
, the function will return the offset of the first object occurance.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 long CScene2::FindScript(HANDLE hFile, char * szObjectName)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par Looks for the script of object szObjectName
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char * szObjectName}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Name of the object
\par 
\par Remarks:
\par If the object got a script, the return value is the offset of the script in the file. If no script is found, the return value is -1.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 float CScene2::GetCamDist(HANDLE hFile)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par Returns the distance of the camera to the player
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 unsigned long CScene2::GetFileSize(HANDLE hFile)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par Returns the size of the scene2.bin file found in its header
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 float CScene2::GetViewDist(HANDLE hFile)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par Returns the currently set view distance
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 float CScene2::GetWorldDim(HANDLE hFile, bool bReadFirst)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par Returns one of the world dim (?) values
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 bool bReadFirst}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
: Defines whether or not you want to read the 1st value. If it set to 0 it reads the 2nd value.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 long CScene2::ImportObject(HANDLE hFile, char * szFileName)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par Imports an object to scene2.bin file
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char * szFileName}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Name of the file containg the object to import
\par 
\par Remarks:
\par The function automaticaly detects the datablock the object in the file has to be put to. 
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 bool CScene2::IsScene2Bin(HANDLE hFile)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par Reads the first two bytes of the file and checks if they are the SCENE2_MAIN datablock identifier.
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE CScene2::LoadScene2Bin(char * szFilename)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par Loads a scene2.bin file.
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char * szFileName}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Name of the scene2.bin file
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 void CScene2::PrepareObjectInfo(ObjectInfo_t * Scene2ObjectInfo_t)}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par 
\par Fills all string members in Scene2ObjectInfo_t with 0.
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 ObjectInfo_t Scene2ObjectInfo_t}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Pointer to a ObjectInfo_t structure
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 void CScene2::ReadDatablocksObjects(HANDLE hFile)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par A generic function which reads out all datablocks and objects and stores the information in a *.txt file
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par 
\par Remarks:
\par This function is ONLY available in the debug build of the MafiaLib Engine.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 bool CScene2::ReadObject(HANDLE hFile, long lOffset, ObjectInfo_t * Scene2ObjectInfo_t, bool bUseFilter)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par Reads out the data of the object found at offset lOffset
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 ObjectInfo_t Scene2ObjectInfo_t}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Pointer to a ObjectInfo_t structure to store the object data in
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 bUseFilter}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Indicates whether or not extra data is to be read such as the characte
r properties. Set to false by default
\par 
\par Remarks:
\par Please ensure that you check the }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 lType}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304  member first before you access any other members.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 long CScene2::RemoveObjectScript(HANDLE hFile, char * szObjectName)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par Deletes the script of object szObjectName
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char * szObjectName}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Name of the object whose script is to be deleted
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 long CScene2::SetCamDist(HANDLE hFile, float fCamDist)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par Sets the distance between the player and the camera
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 float fCamDist}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Distance between player & camera.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 long CScene2::SetViewDist(HANDLE hFile, float fViewDist)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par Sets the viewdistance
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 float fViewDist}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Viewdistance in metres (probably).
\par 
\par Remarks:
\par Increasing the viewdistance should be done wisely. It could slow down the game.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 long CScene2::SetWorldDim(HANDLE hFile, float fDim1, float fDim2)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par Sets the world dimension (?)
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 float fDim1}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : First value
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 float fDim2}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Second value
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 int CScene2::GetNextObject(HANDLE hFile, BasicObjectInfo_t * pBasicObjectInfo_t, Filter_t * pObjectFilter_t)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par Returns the name of an object each time it is called.
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 BasicObjectInfo_t * pBasicObjectInfo_t}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Pointer to a }{
\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 BasicObjectInfo_t }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 structure which will contain the basic object info.
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 Filter_t * pObjectFilter_t}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Pointer to a }{
\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 Filter_t }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 structure.
\par 
\par Return Values:
\par 1 - An object was found ie. call was successfull
\par 0 - An object was found but it does not meet the filter requirements specified by }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 pObjectFilter_t}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
 or the processed datablock did not contain an object.
\par -1 - The end of the file was reached.
\par 
\par Remarks:
\par In order to make the function call succeed, you must set the file pointer to 6 bytes after the filebegin AND set }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 pBasicObjectInfo_t->lNextObjectOffset=6}{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304  the FIRST TIME you call this function.
\par After every call, the filepointer is moved so that it points to the next object. If you use this function in a loop to build the 
object name list for example, you must not modify the filepointer unless you set it back to its old after-call location before you call this function again.
\par The function is able to do the filter job for you. If you want the function to filter objects, you have to set }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 pObjectFilter_t }{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 to the address of a }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 Filter_t }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
structure. However, the structure must be setup properly in order to work. Please refer to Scene2.h to get detailed help on how to setup this structure. If no filter is required, set }{
\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 pObjectFilter_t}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304  to NULL.
\par The }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 pBasicObjectInfo_t->lNextObjectOffset}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304  is an important parameter for the function. 
It contains the offset of the next object. It is used internally by the function. If you use this function in a loop to build the object name list for example, this variable must not be modified unless you set it back to its old after-call value before yo
u call this function again.
\par 
\par }{\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 int}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304  CScene2::AddObjectScriptBuffer(HANDLE hFile, }{
\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304  * szObjectName, }{
\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304  * Buffer, }{
\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 int}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304  ScriptSize, }{
\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 short}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304  nDatablockType)}{
\b\f2\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 Adds a script to an object - script is read from buffer}{\f2\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char * szObjectName}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
: Pointer to a buffer which contains the name of the object you want to add the script to.
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char * Buffer}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Pointer to a buffer which contains the script to add.
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 int ScriptSize}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Size of the script you want to add.
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 short nDatablockType}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : The datablock the object is situated in. It can be any of the following constants:

\par SPECIAL_MAIN
\par ADDITIONAL_MAIN
\par 
\par Remarks:
\par The return value is 0 if the operation succeeded, otherwise -1.
\par 
\par }{\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 long}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304  CScene2::ReadObjectScript(HANDLE hFile, }{
\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304  * Buffer, }{
\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304  * szObjectName, }{
\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 short}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304  nDatablockType)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par Reads the script of an object and writes it into a buffer
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char * Buffer}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Pointer to a buffer to write the script to
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char * szObjectName}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Pointer to a buffer containing the name of the objects which script is to be read

\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 short nDatablockType}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : The datablock the object is situated in. It can be any of the following constants:

\par SPECIAL_MAIN
\par ADDITIONAL_MAIN
\par 
\par Remarks:
\par If the call succeeds, the return value is the size of the script. Otherwise the return value is -1.
\par 
\par }{\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 bool}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304  CScene2::GetCopyrightText(HANDLE hFile, }{
\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304  * Buffer)
\par 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 Reads out the copyright text found in the header of scene2.bin
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char * Buffer}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Pointer to a buffer to store copyright text in.
\par 
\par Remarks:
\par The function returns true if copyright was read successfully, otherwise false.
\par 
\par }{\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 bool}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304  CScene2::SetCopyrightText(HANDLE hFile, }{
\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304  * Copyright)
\par 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 Writes the copyright text found in the header of scene2.bin
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char * Copyright}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Pointer to a buffer containing the copyright-text.
\par 
\par Remarks:
\par The function returns true if copyright was read successfully, otherwise false.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 void CScene2::AddObjectEx(HANDLE hFile, ObjectInfo_t * Scene2ObjectInfo_t, char * szObjectToReplace)}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 

\par 
\par Adds an object to scene2.bin file
\par 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 ObjectInfo_t Scene2ObjectInfo_t}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 : Pointer to a ObjectInfo_t structure containing the objects properties

\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 char * szObjectToReplace}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
: Pointer to a zero terminated buffer containing the name of the object which is supposed to be
\par replaced by the function.
\par 
\par Remarks:
\par This is the extended version. The difference to the standard version is that the script problem is managed internally.
\par If }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 szObjectToReplace}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304  is set to NULL, the function will add the object specified by }{
\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 Scene2ObjectInfo_t}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 .
\par If you specify an object name in }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 szObjectToReplace}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
, the function will replace the given object by the object specified by }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 Scene2ObjectInfo_t}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
. If the object does not exist, the function fails.
\par 
\par Ensure that you set the }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 lType}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
 member of the ObjectInfo_t structure properly. Otherwise the function will fail.
\par Currently supported object types:
\par S_NORMAL_OBJECT_TYPE_MODEL
\par S_NORMAL_OBJECT_TYPE_LIGHT
\par S_NORMAL_OBJECT_TYPE_06
\par NORMAL_OBJECT_TYPE_SECTOR
\par SPECIAL_OBJECT_TYPE_CHARACTER
\par SPECIAL_OBJECT_TYPE_PLAYER\line SPECIAL_OBJECT_TYPE_SHOOTABLE
\par SPECIAL_OBJECT_TYPE_CAR }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 (*) }{\b\f2\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 <tmp>}{
\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 SPECIAL_OBJECT_TYPE_SCRIPT }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 (*) }{
\b\f2\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 <st>}{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 SPECIAL_OBJECT_TYPE_TRAFFIC
\par SPECIAL_OBJECT_TYPE_PEDS
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid13837304\charrsid13837304 SPECIAL_OBJECT_TYPE_DOOR}{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid13837304\charrsid13837304 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 ADDITIONAL_OBJECT_TYPE_SCRIPT }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 (*) <init-tmp>
\par 
\par (*): }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246\charrsid13837304 Objects with this signature are hard coded objects. This means that they have a hardcoded name. After the object was added you must change the name of it. 
The hardcoded name of the object is written after the signature (strings in "<>" brackets)}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid10053162 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid10053162\charrsid10053162 int CScene2::Protect(HANDLE hFile,DWORD dwFlags,const unsigned long lProtBlockSize)}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid10053162 
\par 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid10053162 \'93Protects\'94 a scene2.bin file to prevent other editors from modifying this file.}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9111808  Protected scene2.bin\rquote s can be read by MAFIA.}{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid10053162 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9398274 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9398274\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9398274\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.}{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9398274 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9398274 DWORD dwFlags}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9398274\charrsid13837304 : }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9398274 Protection flags}{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9398274\charrsid13837304 .}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9111808  (default: PROTECT_GARBAGE | PROTECT_ADD)}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9398274 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9398274 const unsigned long lProtBlockSize}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9398274 : Size of protections blocks}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9111808 . }{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid15532836 lProtBlockSize-6 m}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid14224660 ust be a multiple of 4! }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9111808 (default: 0x12)}{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9398274 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9111808 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9111808\charrsid9111808 Flags:
\par PROTECT}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9111808 _GARBAGE: Adds garbage datablocks to the scene2.bin file
\par PROTECT_ADD: Adds a second type datablock to objects located in 2. main datablock SPECIAL_MAIN. This is a special protection to defeat BScriptView 1.1
\par 
\par It is recommended to keep these default parameters in order to ensure maximum protection.
\par 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid5844254 Note:
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9111808 This functions \'93protects\'94 a scene2.bin file agains modifications by other editors. It does this by adding garbage to the scene2.bin file which fools the read
\par routines of other scene2.bin editors.}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid12994296  As a result, the editors either crash or they won\rquote t show any objects.
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9111808 This routine does not encrypt anything so it is still possible to open and edit the file with hex editors.
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid4482357 Protected scene2.bin files can be read by MAFIA and they can be }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7867135 
opened and modified by MafiaLib (althoug it is not recommended to modify protected scene2.bin files).
\par 
\par Note on modifying protected scene2.bin files:}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid5844254 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7867135 As stated above it is not recommended to modify protected scene2.bin files. MafiaLib fully supports that but it may cause
\par that the protection of single objects is removed. That\rquote s why it is strongly recommended to create two copies of your scene2.bin file. One protected copy for distribution
\par and another copy for development, interal usage,....what ever.
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid2754001 
\par Note on time:
\par The protection process might be very time consuming. How much time the protection will take depends on the size of the scene2.bin file which is }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid12994296 supposed
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid2754001 to be protected.
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid12994296 It is possbile to speed up this process by specifying the }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid12994296\charrsid12994296 PROTECT_ADD}{
\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid12994296  }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid12994296 flag only. This flag will only affect objects of the 2}{\f1\fs20\lang2057\langfe1031\super\langnp2057\insrsid12994296\charrsid12994296 nd}
{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid12994296  main datablock SPECIAL_MAIN while
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid12994296 PROTECT_GATBAGE}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid12994296  affects all parts of the scene2.bin file.}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid15805396 
 The negative part of this is that this protection flag will offer protection against BScriptView 1.1, only.
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid2577356 
\par Note on protection block size:
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid15532836 As mentioned above this value allows you to specify the size of the protections datablocks to add. }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9582220 
You should try to keep this value as small as possible or it might}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid2577356 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9582220 happen that your protected scene2.bin file is }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid3081021 much}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9582220 
 much bigger than your unprotected one.\line }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9582220\charrsid9582220 Please also note that the size}{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9582220  }{
\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9582220\charrsid9582220 -}{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9582220  }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9582220\charrsid9582220 6 must be a multiple of 4.}{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9582220  This is because the garbage datablocks are filled with 4-byte-aligned garbage data. In fact you can
\par calculate the size very easily:
\par {\listtext\pard\plain\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9582220 \hich\af1\dbch\af0\loch\f1 1.\tab}}\pard \ql \fi-360\li720\ri0\nowidctlpar\jclisttab\tx720\faauto\ls1\rin0\lin720\itap0\pararsid9582220 {
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9582220 How much 4-byte-data would you like to have? (1, 2, 3, ....) \endash  Default is 3
\par {\listtext\pard\plain\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9582220 \hich\af1\dbch\af0\loch\f1 2.\tab}Calculate }{\i\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9582220 NumOfFourByteData}{
\i\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9582220\charrsid9582220 *}{\i\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9582220 4}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9582220 
\par {\listtext\pard\plain\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9582220 \hich\af1\dbch\af0\loch\f1 3.\tab}Add 6 to it.
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid9582220 {\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9582220 Example on default value (0x12=18):
\par {\listtext\pard\plain\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9582220 \hich\af1\dbch\af0\loch\f1 1.\tab}}\pard \ql \fi-360\li720\ri0\nowidctlpar\jclisttab\tx720\faauto\ls2\rin0\lin720\itap0\pararsid9582220 {
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9582220 3
\par {\listtext\pard\plain\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9582220 \hich\af1\dbch\af0\loch\f1 2.\tab}3*4=12
\par {\listtext\pard\plain\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9582220 \hich\af1\dbch\af0\loch\f1 3.\tab}12+6=18=0x12
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid9582220 {\f1\fs20\lang2057\langfe1031\langnp2057\insrsid13314269 We add 6 to the value from step 2 since every datablock starts with the type-id number which is 2 bytes in size PLUS the size
 of the datablock which is 4 bytes in size.}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid9582220 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid2110310 
\par Return Value:
\par The return value is 0 if everything went smoothly or -1 if lProtBlockSize-6 isn\rquote t a multiple of 4}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid11040321 .}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid2110310 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid5844254 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid5844254\charrsid5844254 bool CScene2::IsProtected(HANDLE hFile)}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid5844254 
\par 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid5844254 Checks the protection of scene2.bin files}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid5844254\charrsid5844254 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid5844254 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid5844254\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid5844254\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.}{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid5844254 
\par 
\par Return Value:
\par It returns }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid5844254\charrsid5844254 true}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid5844254  if the file is protected or }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid5844254 false}{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid5844254  if it isn\rquote t.
\par 
\par Note:
\par This function checks the complete scene2.bin file an it notices any protection datablock of }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid5844254 PROTECT_GATBAGE}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid5844254  & }{
\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid5844254 PROTECT_ADD}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid5844254 .
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid6827466 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid6827466\charrsid6827466 int CScene2::NewTemplate(HANDLE hFile)}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid6827466 
\par 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid6827466 {\f1\fs20\lang2057\langfe1031\langnp2057\insrsid6827466 Deletes all mission related objects (Cars, Actors, Scripts) from a scene2.bin file.
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid6827466 
\par }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid6827466\charrsid13837304 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid6827466\charrsid13837304 : Handle to an open scene2.bin file. The handle must have read/write access.}{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid6827466 
\par 
\par Note:
\par Mostly existing missions from the game are used as a base for own missions. In order to use an existing mission as a base it is necessary to delete all mission-related
\par objects like actors, scripts and cars. This function does this automatically.
\par Please note that this function might be time consuming. The time which is necess}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid7869246 a}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid6827466 
ry to complete the operation depends on the number of actors, cars & scripts to delete
\par and of course on the size of the scene2.bin file.}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid6827466\charrsid6827466 
\par }}