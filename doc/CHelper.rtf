{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1031\deflangfe1031{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f36\froman\fcharset238\fprq2 Times New Roman CE;}{\f37\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f39\froman\fcharset161\fprq2 Times New Roman Greek;}{\f40\froman\fcharset162\fprq2 Times New Roman Tur;}
{\f41\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f42\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f43\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f44\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\f46\fswiss\fcharset238\fprq2 Arial CE;}{\f47\fswiss\fcharset204\fprq2 Arial Cyr;}{\f49\fswiss\fcharset161\fprq2 Arial Greek;}{\f50\fswiss\fcharset162\fprq2 Arial Tur;}{\f51\fswiss\fcharset177\fprq2 Arial (Hebrew);}
{\f52\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f53\fswiss\fcharset186\fprq2 Arial Baltic;}{\f54\fswiss\fcharset163\fprq2 Arial (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;
\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;
\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1031\langfe1031\cgrid\langnp1031\langfenp1031 \snext0 Normal;}{\*\cs10 \additive \ssemihidden Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}}{\*\rsidtbl \rsid2768858\rsid6560381\rsid8454636\rsid8869083\rsid11488589\rsid15890931}
{\*\generator Microsoft Word 10.0.2627;}{\info{\author ASM}{\operator ASM}{\creatim\yr2004\mo3\dy13\hr18\min55}{\revtim\yr2004\mo3\dy13\hr19\min10}{\version7}{\edmins0}{\nofpages4}{\nofwords1026}{\nofchars6465}{\*\company Private}{\nofcharsws7477}
{\vern16437}}\margl1417\margr1417\margt1417\margb1134 \widowctrl\ftnbj\aenddoc\hyphhotz425\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3
\jcompress\viewkind5\viewscale100\nolnhtadjtbl\rsidroot6560381 \fet0\sectd \linex0\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3
\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain 
\qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 \fs24\lang1031\langfe1031\cgrid\langnp1031\langfenp1031 {\b\f1\fs22\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 CHelper Class Documentation}{
\b\fs22\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 \line }{\b\f1\fs22\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 Part of the MafiaLib Engine
\par Copyright (c) 2003, 2004 ASM}{\b\fs28\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 
\par }{\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 This document contains all necessary information you need to know to work with the CHelper Class of the MafiaLib Engine.\line 
If you own the CMLWrapper wrapper class, you can ignore the HANDLE hFile parameters in function declarations.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 Overview
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 
\par MafiaLib Engine is a set of functions which allow you to work with Mafia's datafiles.\line The CHelper class is a part of this library. This class provides auxilliary functions which are used quite often.}{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid15890931 Please note that all functions are static. This means you can access them even without creating an instance of the CHelper class.}{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid15890931\charrsid6560381 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 long CHelper::BufferData(HANDLE hFile, char * szFilename, long lSize)}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 .
\par 
\par Buffers data from current hFile
\par 
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Handle to an open scene2.bin file. The handle must have read/write access.\line }{
\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 char * szFileName}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Name of the file to store buffered data.\line }{
\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 long lSize}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Number of bytes to buffer
\par 
\par Remarks:\line The function buffers everything from current hFile to lSize to szFilename. If you specify -1 for lSize, everything from current hFile to EOF (end of file) is buffered to szFilename.\line 
Please notice that this function is recommend for buffering little amount of data. For buffering large amount of data, use BufferDataFM.\line After the function call the file pointer is NOT moved.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 long CHelper::BufferDataFM(HANDLE hFile, char * szFileName, long lOffset, long lSize)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 
\par Buffers data from current hFile
\par 
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Handle to an open scene2.bin file. The handle must have read/write access.\line }{
\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 char * szFileName}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Name of the file to store buffered data.\line }{
\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 long lOffset}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Where to begin the buffering process\line }{
\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 lSize}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Number of bytes to buffer
\par 
\par Remarks:\line The function buffers everything from current hFile to lSize to szFileName. The difference to BufferData is that this function uses file mapping for the buffering operation. T
hat's why this function is much faster than BufferData and therefore it's recommend for buffering large amount of data.\line Another difference is that you }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 MUST}{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381  specify the offset to tell the function where to begin the buffering process.\line lSize }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 MUST}{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381  contain the number of bytes to buffer. You }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 cannot}{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381  specify -1 here to buffer to EOF.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 unsigned long CHelper::Char2Long(BYTE *ptr,int size)\line unsigned long CHelper::Char2Long(BYTE *ptr)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 
\par Converts string to long
\par 
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 BYTE *ptr}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Pointer to a string to convert\line }{
\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 int size}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Number of bytes to convert
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 unsigned long CHelper::Char2LongE(BYTE * ptr, int size)\line unsigned long CHelper::Char2LongE(BYTE * ptr)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 
\par Converts string to long but reverses the order of characters
\par 
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 BYTE *ptr}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Pointer to a string to convert\line }{
\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 int size}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Number of bytes to convert
\par 
\par Remarks:\line As already mentioned this function reverses the order of the characters during operation.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 int CHelper::Compare(char * szString1, char * szString2, long lSize)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 
\par Compares two strings to each other
\par 
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 char * szString1}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Pointer to first string\line }{
\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 char * szString1}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Pointer to second string\line }{
\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 long lSize}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Number of bytes to compare
\par 
\par Remarks:\line This function is supposed to be used to compare binary strings. That's why you must specify the number of bytes to compare.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 long CHelper::GetFileSize(char * szFileName)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 
\par Retrieves the size of file szFileName
\par 
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 char * szFileSize}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Pointer to name of file to get size from
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 void CHelper::Long2String(char *out, long number, long size)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 
\par Converts long to string
\par 
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 char * out}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Pointer to buffer to store converted long.\line }{
\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 long number}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Value to convert\line }{
\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 long size}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Number of bytes to convert
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 long CHelper::PasteBufferedData(HANDLE hFile, char * szFilename, bool bDel)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 
\par Pastes contents of szFilename to current hFile
\par 
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Handle to an open scene2.bin file. The handle must have read/write access.\line }{
\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 char * szFileName}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Name of the file to store buffered data.\line }{
\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 bool bDel}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : If true, the szFilename is deleted
\par 
\par Remarks:\line Please notice that this function is recommend for pasting little amount of data. For pasting large amount of data, use PasteBufferedDataFM.\line After the function call the file pointer is moved.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 long CHelper::PasteBufferedDataFM(HANDLE hFile, char * szFileName, bool bDel)
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 
\par Pastes contents of szFilename to current hFile
\par 
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Handle to an open scene2.bin file. The handle must have read/write access.\line }{
\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 char * szFileName}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Name of the file to store buffered data.\line }{
\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 bool bDel}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381  : If true, the szFilename is deleted 
\par 
\par Remarks:
\par The difference to PasteBufferedData is that this function uses file mapping for the operation. That's why this function is much faster than PasteBufferedData and therefore it's recommend for pasting large amount of data.\line 
After the function call the file pointer is moved. 
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 long CHelper::ReverseBits(unsigned long value, int type, int times)}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381  
\par 
\par Reverses the bits of a given long 
\par 
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 unsigned long value}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Value whose bits are to be reversed.\line }{
\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 int type}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Specifies how to reverse the bits. It can be any of the following values:\line TYPE_BYTE\line 
TYPE_WORD\line }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 int times}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381  : How many bits to reverse 
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 long CHelper::StrLen(char * str)}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381  
\par 
\par Returns lenght of a given string 
\par 
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 char * str}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : String whose size is to be returned.
\par 
\par }{\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 int}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381  CHelper::binstrstr(}{
\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 char}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381  * buffer, }{\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 
char}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381  * tofind, }{\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 int}{
\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381  tofindsize, }{\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 int}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 
 size)
\par 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 Looks for a sequence of bytes in a buffer
\par 
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 char * buffer}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Pointer to a buffer which is to be searched
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 char * tofind}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Pointer to a buffer containing the byte sequence which is to be found
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 int tofindsize}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Size of the tofind buffer
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 int size}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Size of buffer
\par 
\par }{\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 float}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381  CHelper::ZRot2Angle(}{
\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 float}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381  fZRot)
\par 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 Converts a Z rotation value into an angle
\par 
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 fload fZRot}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Rotation value to convert
\par 
\par }{\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 float}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381  CHelper::XYRot2Angle(}{
\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 float}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381  fXYRot)
\par 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 Converts a X or Y rotation value into an angle
\par 
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 fload fXYRot}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Rotation value to convert
\par 
\par }{\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 float}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381  CHelper::Angle2ZRotCos(}{
\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 float}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381  fAngle)
\par 
\par }{\f1\fs20\cf1\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 Computes the rotation value for the first rotation parameter
\par 
\par }{\f1\fs20\cf6\insrsid8869083 fload fAngle}{\f1\fs20\insrsid8869083 : Angle to convert
\par 
\par }{\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 float}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381  CHelper::Angle2ZRotSin(}{
\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 float}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381  fAngle)
\par 
\par }{\f1\fs20\cf1\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 Computes the rotation value for the third rotation parameter
\par 
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 fload fAngle}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Angle to convert
\par 
\par }{\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 float}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381  CHelper::Angle2XYRot(}{
\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 float}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381  fAngle)
\par 
\par }{\f1\fs20\cf1\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 Computes the rotation value for the second or fourth rotation parameter
\par 
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 fload fAngle}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Angle to convert
\par 
\par }{\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid6560381\charrsid6560381 int }{\b\f1\fs20\ul\cf1\lang2057\langfe1031\langnp2057\insrsid6560381\charrsid6560381 CHelper::ReadTillChar(HANDLE hFile, }{
\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid6560381\charrsid6560381 char }{\b\f1\fs20\ul\cf1\lang2057\langfe1031\langnp2057\insrsid6560381\charrsid6560381 * Buffer}{
\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid6560381\charrsid6560381 , char }{\b\f1\fs20\ul\cf1\lang2057\langfe1031\langnp2057\insrsid6560381\charrsid6560381 cEndChar)}{\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid6560381 
\par }{\b\f1\fs20\ul\cf2\lang2057\langfe1031\langnp2057\insrsid6560381\charrsid6560381 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid6560381 Reads data from a file until a char specified by cEndChar is}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381  read
\par 
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Handle to an open scene2.bin file. The handle must have read/write access.
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 char * Buffer}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : Pointer to buffer to read data into}{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083 
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid11488589\charrsid6560381 char }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid11488589 cEndChar}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid11488589\charrsid6560381 : }{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid2768858 Terminating }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid11488589 character
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid6560381 
\par Return Value: The number of bytes read.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid2768858\charrsid2768858 int CHelper::BinSeqLen(char * ptr, char EndChar)}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid6560381 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid2768858 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid2768858\charrsid2768858 Return}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid2768858 s the lenght of a binary block of data.
\par 
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid2768858\charrsid6560381 char * }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid2768858 ptr}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid2768858\charrsid6560381 : Pointer to buffer }{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid2768858 containing the sequence of bytes
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid2768858\charrsid6560381 char }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid2768858 EndChar}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid2768858\charrsid6560381 : }{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid2768858 Terminating character
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid15890931 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid15890931\charrsid15890931 int CHelper::Dump(HANDLE hFile, char * szFileName, unsigned long lOffset, unsigned long lSize)}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid15890931 
\par 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid15890931 Dumps contents of an open file into a dump file.
\par 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid15890931 {\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid15890931\charrsid6560381 HANDLE hFile}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid15890931\charrsid6560381 : Handle to a
n open scene2.bin file. The handle must have read/write access.
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid15890931\charrsid6560381 char * }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid15890931 szFileName}{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid15890931\charrsid6560381 : Pointer to buffer }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid15890931 containing the name of the file the data is to be stored in}{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8454636 .}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid15890931 
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8454636 unsigned long lOffset}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8454636\charrsid6560381 : }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8454636 Start offset for dumping.
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8454636 unsigned long lSize}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8454636\charrsid6560381 : }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8454636 Specifies the number of bytes to read.

\par 
\par Note: The difference of this function to }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8454636\charrsid8454636 Buffer}{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8454636 DataFM}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8454636 
 is that this version appends data to the dump file specified by }{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8454636\charrsid8454636 szFileName}{\b\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8454636  }{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8454636 if it already exists and if it
\par contains data.
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid8869083 float CHelper::DoorAngleToVal(float fRealAngle)}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083 
\par 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083 Converts an angle into the corresponding door-move-value.
\par 
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083 float fRealAngle}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083 Angle to convert.
\par 
\par }{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid8869083 float CHelper::DoorValToAngle(float fMoveAngle)}{\b\f1\fs20\ul\lang2057\langfe1031\langnp2057\insrsid8869083 
\par 
\par }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083 Converts a door-move-value into an angle
\par 
\par }{\f1\fs20\cf6\lang2057\langfe1031\langnp2057\insrsid8869083 float fMoveAngle}{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid6560381 : }{\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083 Move-value to convert}{
\f1\fs20\lang2057\langfe1031\langnp2057\insrsid8869083\charrsid8869083 
\par }}